name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch: 

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Job 1: Code Quality & Testing
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
      fail-fast: false # Don't cancel other jobs if one fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      # Enhanced dependency caching
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/eslint
            node_modules
            */node_modules
            frontend/node_modules
            backend/node_modules
            infra/node_modules
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-deps-node${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-deps-node${{ matrix.node-version }}-
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-deps-
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit --no-fund
          else
            npm install --prefer-offline --no-audit --no-fund
          fi

      # Security scanning
      - name: Security audit
        run: |
          npm audit --audit-level high --production
        continue-on-error: true # Don't fail build on audit issues, but report them

      # Code quality checks
      - name: Run ESLint
        run: |
          npm run lint --if-present
        continue-on-error: false

      - name: Run Prettier check
        run: |
          npm run format:check --if-present || echo "Prettier not configured"
        continue-on-error: true

      # Testing
      - name: Run unit tests
        run: |
          npm test --if-present
        env:
          CI: true

      - name: Run integration tests
        run: |
          npm run test:integration --if-present || echo "Integration tests not configured"
        continue-on-error: true

      # Coverage reporting
      - name: Upload coverage to Codecov
        if: matrix.node-version == '18' # Only upload once
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  # Job 2: Build & Docker
  build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.event_name == 'push' # Only build on pushes, not PRs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Restore dependencies from previous job
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */node_modules
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-deps-node${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      # Build application
      - name: Build application
        run: |
          npm run build --if-present || echo "Build script not found, creating placeholder"
          mkdir -p dist
          echo "Build completed at $(date)" > dist/build-info.txt

      # Cache build artifacts
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            dist
            build
            .next
            frontend/dist
            backend/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      # Docker build with caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ops-app:latest
            ops-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/ops-app.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/ops-app.tar
          retention-days: 1

  # Job 3: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: staging
      url: https://staging.ops-app.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ops-app.tar

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Docker image loaded: $(docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}')"
          # Add your staging deployment commands here
          echo "Staging deployment completed"

  # Job 4: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://ops-app.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ops-app.tar

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          echo "Production deployment completed"

  # Job 5: Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: docker-image